import jsPDF from "jspdf";
import autoTable from "jspdf-autotable";
import { format } from "date-fns";

export const generateMeetingPDF = (meeting, meeting_insights, speaker_summaries) => {
  const doc = new jsPDF();

  const pageHeight = doc.internal.pageSize.getHeight();
  const marginTop = 20;
  const marginBottom = 20;
  let y = marginTop;

  const addNewPage = () => {
    doc.addPage();
    y = marginTop;
  };

  // --- Title ---
  doc.setFontSize(16);
  doc.text("Meeting Summary, Minutes, and Action Items", 14, y);
  y += 12;

  // --- Date & Attendees ---
  doc.setFontSize(12);
  doc.text(
    `Date: ${
      meeting?.end_time
        ? format(new Date(meeting.end_time), "MMMM d, yyyy, h:mm a")
        : "N/A"
    }`,
    14,
    y
  );
  y += 8;

  if (speaker_summaries) {
    const attendeesText = `Attendees: ${Object.keys(speaker_summaries).join(", ")}`;
    const wrapped = doc.splitTextToSize(attendeesText, 180);
    if (y + wrapped.length * 6 > pageHeight - marginBottom) addNewPage();
    doc.text(wrapped, 14, y);
    y += wrapped.length * 6 + 6;
  }

  // --- Meeting Summary ---
  if (meeting_insights?.structured_summary?.summary_text) {
    doc.setFontSize(14);
    if (y + 8 > pageHeight - marginBottom) addNewPage();
    doc.text("Meeting Summary", 14, y);
    y += 8;

    doc.setFontSize(11);
    const summaryLines = doc.splitTextToSize(
      meeting_insights.structured_summary.summary_text,
      180
    );
    if (y + summaryLines.length * 6 > pageHeight - marginBottom) addNewPage();
    doc.text(summaryLines, 14, y);
    y += summaryLines.length * 6 + 10;
  }

  // --- Minutes of the Meeting ---
  if (meeting_insights?.structured_summary?.minutes) {
    doc.setFontSize(14);
    if (y + 8 > pageHeight - marginBottom) addNewPage();
    doc.text("Minutes of the Meeting", 14, y);
    y += 8;

    doc.setFontSize(11);
    const lines = meeting_insights.structured_summary.minutes.split("\n");
    let sectionNum = 0;

    lines.forEach((line) => {
      const trimmed = line.trim();

      if (trimmed.startsWith("## ")) {
        sectionNum++;
        const heading = `${sectionNum}. ${trimmed.replace("## ", "")}`;
        const neededHeight = 6;
        if (y + neededHeight > pageHeight - marginBottom) addNewPage();
        doc.setFont(undefined, "bold");
        doc.text(heading, 14, y);
        doc.setFont(undefined, "normal");
        y += neededHeight;
      } else if (trimmed.startsWith("- ")) {
        const bullet = `• ${trimmed.replace("- ", "")}`;
        const wrapped = doc.splitTextToSize(bullet, 180);
        const neededHeight = wrapped.length * 6;
        if (y + neededHeight > pageHeight - marginBottom) addNewPage();
        doc.text(wrapped, 20, y);
        y += neededHeight;
      } else if (trimmed !== "") {
        const wrapped = doc.splitTextToSize(trimmed, 180);
        const neededHeight = wrapped.length * 6;
        if (y + neededHeight > pageHeight - marginBottom) addNewPage();
        doc.text(wrapped, 14, y);
        y += neededHeight;
      } else {
        y += 4;
      }
    });

    y += 10;
  }

  // --- Action Items ---
  if (meeting_insights?.structured_summary?.action_items?.length > 0) {
    doc.setFontSize(14);
    if (y + 8 > pageHeight - marginBottom) addNewPage();
    doc.text("Revised Action Items with Deadlines", 14, y);
    y += 8;

    autoTable(doc, {
      startY: y,
      head: [["Task", "Responsible Person", "Deadline"]],
      body: meeting_insights.structured_summary.action_items.map((item) => [
        item.Task?.replace("- Task: ", ""),
        item["Responsible Person"]?.replace("Owner: ", ""),
        item.Deadline?.replace("Deadline: ", ""),
      ]),
      styles: { fontSize: 11 },
      headStyles: { fillColor: [240, 240, 240], textColor: 20, fontStyle: "bold" },
      alternateRowStyles: { fillColor: [250, 250, 250] },
      margin: { top: y },
      didDrawPage: (data) => {
        y = data.cursor?.y ? data.cursor.y + 10 : marginTop;
      },
    });
  }

  // --- Footer (Generated by Nous Meeting) ---
  const pageCount = doc.internal.getNumberOfPages();
  for (let i = 1; i <= pageCount; i++) {
    doc.setPage(i);
    doc.setFontSize(10);
    doc.setTextColor(120);
    doc.text(
      `Generated by Nous Meeting · Page ${i} of ${pageCount}`,
      doc.internal.pageSize.getWidth() / 2,
      doc.internal.pageSize.getHeight() - 10,
      { align: "center" }
    );
  }

  // Save PDF
  doc.save(`Meeting_${meeting?.id || "insights"}.pdf`);
};
